'use client';

import React, { useState, useEffect, useCallback } from 'react';
import {
  TimesheetTable,
  TimesheetEntry,
} from '@/components/common/timesheet-table/TimesheetTable';
import { createClient } from '@/utils/supabase/client';
import { toast } from 'sonner';
import type {
  Project,
  Timesheet,
  TimesheetStatus,
  User,
} from '@/types/database.types';

interface TimesheetContentProps {
  projects: Project[];
  timesheets: Timesheet[];
  isLoading: boolean;
  status?: TimesheetStatus;
  user?: User;
  weekStart?: Date;
}

export function TimesheetContent({
  projects,
  timesheets,
  isLoading,
  status = 'draft',
  user,
  weekStart,
}: TimesheetContentProps) {
  const [localTimesheets, setLocalTimesheets] =
    useState<Timesheet[]>(timesheets);
  const [pendingUpdates, setPendingUpdates] = useState<
    Record<string, Partial<Timesheet>>
  >({});
  const supabase = createClient();

  // Update local timesheets when props change
  useEffect(() => {
    setLocalTimesheets(timesheets);
  }, [timesheets]);

  // Map the timesheet entries to the format expected by TimesheetTable
  const entries: TimesheetEntry[] = localTimesheets.map((entry) => ({
    id: entry.id,
    monday_hours: entry.monday_hours || 0,
    tuesday_hours: entry.tuesday_hours || 0,
    wednesday_hours: entry.wednesday_hours || 0,
    thursday_hours: entry.thursday_hours || 0,
    friday_hours: entry.friday_hours || 0,
    saturday_hours: entry.saturday_hours || 0,
    sunday_hours: entry.sunday_hours || 0,
    project: {
      id: entry.project_id,
      name:
        projects.find((p) => p.id === entry.project_id)?.name ||
        'Unknown Project',
      client: projects.find((p) => p.id === entry.project_id)?.clients,
    },
  }));

  // Handle adding a new entry
  const handleAddEntry = async (newEntry: Omit<TimesheetEntry, 'id'>) => {
    if (!user || !weekStart) {
      toast.error('Unable to add entry: Missing user or week information');
      return;
    }

    try {
      // Create the new timesheet entry without an ID (will be generated by the database)
      const newTimesheet = {
        user_id: user.id,
        project_id: newEntry.project.id,
        week_start_date: weekStart.toISOString(),
        monday_hours: newEntry.monday_hours,
        tuesday_hours: newEntry.tuesday_hours,
        wednesday_hours: newEntry.wednesday_hours,
        thursday_hours: newEntry.thursday_hours,
        friday_hours: newEntry.friday_hours,
        saturday_hours: newEntry.saturday_hours,
        sunday_hours: newEntry.sunday_hours,
      };

      // Save to the database
      const { data, error } = await supabase
        .from('timesheets')
        .insert(newTimesheet)
        .select()
        .single();

      if (error) throw error;

      // Update the local state with the new entry from the database
      if (data) {
        setLocalTimesheets((prev) => [...prev, data]);
      }

      toast.success('Timesheet entry added successfully');
    } catch (error) {
      console.error('[TimesheetContent] Error adding entry:', error);
      toast.error('Failed to add timesheet entry');
    }
  };

  // Handle updating an entry
  const handleUpdateEntry = async (
    id: string,
    updatedFields: Partial<TimesheetEntry>,
  ) => {
    // Store the update in pending updates
    setPendingUpdates((prev) => ({
      ...prev,
      [id]: {
        ...prev[id],
        ...(updatedFields.monday_hours !== undefined && {
          monday_hours: updatedFields.monday_hours,
        }),
        ...(updatedFields.tuesday_hours !== undefined && {
          tuesday_hours: updatedFields.tuesday_hours,
        }),
        ...(updatedFields.wednesday_hours !== undefined && {
          wednesday_hours: updatedFields.wednesday_hours,
        }),
        ...(updatedFields.thursday_hours !== undefined && {
          thursday_hours: updatedFields.thursday_hours,
        }),
        ...(updatedFields.friday_hours !== undefined && {
          friday_hours: updatedFields.friday_hours,
        }),
        ...(updatedFields.saturday_hours !== undefined && {
          saturday_hours: updatedFields.saturday_hours,
        }),
        ...(updatedFields.sunday_hours !== undefined && {
          sunday_hours: updatedFields.sunday_hours,
        }),
      },
    }));

    // Update the local state immediately for UI feedback
    setLocalTimesheets((prev) =>
      prev.map((entry) =>
        entry.id === id
          ? {
              ...entry,
              ...(updatedFields.monday_hours !== undefined && {
                monday_hours: updatedFields.monday_hours,
              }),
              ...(updatedFields.tuesday_hours !== undefined && {
                tuesday_hours: updatedFields.tuesday_hours,
              }),
              ...(updatedFields.wednesday_hours !== undefined && {
                wednesday_hours: updatedFields.wednesday_hours,
              }),
              ...(updatedFields.thursday_hours !== undefined && {
                thursday_hours: updatedFields.thursday_hours,
              }),
              ...(updatedFields.friday_hours !== undefined && {
                friday_hours: updatedFields.friday_hours,
              }),
              ...(updatedFields.saturday_hours !== undefined && {
                saturday_hours: updatedFields.saturday_hours,
              }),
              ...(updatedFields.sunday_hours !== undefined && {
                sunday_hours: updatedFields.sunday_hours,
              }),
            }
          : entry,
      ),
    );
  };

  // Save all pending updates to the database
  const saveAllUpdates = useCallback(async () => {
    if (!user || !weekStart || Object.keys(pendingUpdates).length === 0) {
      return;
    }

    try {
      // Create an array of promises for each update
      const updatePromises = Object.entries(pendingUpdates).map(
        ([id, changes]) =>
          supabase.from('timesheets').update(changes).eq('id', id),
      );

      // Execute all updates in parallel
      await Promise.all(updatePromises);

      // Clear pending updates
      setPendingUpdates({});

      toast.success('All timesheet entries updated successfully');
    } catch (error) {
      console.error('[TimesheetContent] Error updating entries:', error);
      toast.error('Failed to update some timesheet entries');
    }
  }, [user, weekStart, pendingUpdates, supabase]);

  // Save updates when the timesheet is saved or submitted
  useEffect(() => {
    if (Object.keys(pendingUpdates).length > 0) {
      saveAllUpdates();
    }
  }, [status, saveAllUpdates, pendingUpdates]);

  // Handle deleting an entry
  const handleDeleteEntry = async (id: string) => {
    try {
      // Optimistically update the UI
      setLocalTimesheets((prev) => prev.filter((t) => t.id !== id));

      // Delete from the database
      const { error } = await supabase.from('timesheets').delete().eq('id', id);

      if (error) throw error;

      toast.success('Timesheet entry deleted successfully');
    } catch (error) {
      console.error('[TimesheetContent] Error deleting entry:', error);
      toast.error('Failed to delete timesheet entry');

      // Revert the optimistic update by refetching the data
      if (user && weekStart) {
        const { data } = await supabase
          .from('timesheets')
          .select('*')
          .eq('user_id', user.id)
          .eq('week_start_date', weekStart.toISOString());

        if (data) {
          setLocalTimesheets(data);
        }
      }
    }
  };

  return (
    <div>
      <div className="p-6">
        <TimesheetTable
          entries={entries}
          isLoading={isLoading}
          editable={status !== 'submitted' && status !== 'approved'}
          projects={projects}
          onAddEntry={handleAddEntry}
          onDeleteEntry={handleDeleteEntry}
          onUpdateEntry={handleUpdateEntry}
        />
      </div>
    </div>
  );
}
